//************************************************************
// nodeId = 1812998333
//
//************************************************************
// нада ше добавити
// нада шось придумати з флагом авто в ручному режимі управленія
// внутрішній контроль температури
// дисплей
// фізичні кнопки не сенсорні, нахуй сенсорні кнопки
#include "painlessMesh.h"

#include <U8g2lib.h> 
#include <Wire.h> 

U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

const uint16_t logo_widht PROGMEM = 64; // Размер в пикселях, а не в байтах
const uint16_t logo_height PROGMEM = 64;
const uint8_t logo[512] PROGMEM = {
  0b00100101, 0b00100100, 0b10001010, 0b10000000, 0b00001110, 0b00001000, 0b00000000, 0b10100100,
  0b10010010, 0b01001001, 0b00100000, 0b00010000, 0b00011111, 0b01111100, 0b00100110, 0b00101010,
  0b01001001, 0b00100100, 0b00101001, 0b00000000, 0b00011111, 0b11101100, 0b00001000, 0b10010101,
  0b00100000, 0b10000001, 0b01000000, 0b01000000, 0b00011111, 0b10011101, 0b00000010, 0b01001000,
  0b00001010, 0b00010100, 0b00000000, 0b00000000, 0b00101110, 0b11101010, 0b11001000, 0b10010110,
  0b00100000, 0b01000000, 0b00000000, 0b00000000, 0b01111111, 0b01011101, 0b11000010, 0b01001001,
  0b00000001, 0b00000000, 0b10000000, 0b00000001, 0b10111101, 0b01111111, 0b11000000, 0b00100100,
  0b01011110, 0b10001000, 0b00000000, 0b00010011, 0b11111111, 0b01111111, 0b01100000, 0b10010010,
  0b10000000, 0b00100000, 0b00000011, 0b11111000, 0b11110111, 0b01101011, 0b11100000, 0b01001010,
  0b00111100, 0b00000000, 0b01001111, 0b11111110, 0b11111011, 0b01101111, 0b11100000, 0b00010101,
  0b01111111, 0b11000000, 0b10011110, 0b00110000, 0b01011101, 0b10110111, 0b11100000, 0b10001000,
  0b01111111, 0b11111100, 0b00111000, 0b00010111, 0b11111011, 0b11011011, 0b11100000, 0b00100101,
  0b01111111, 0b11111111, 0b11110000, 0b01101011, 0b11001110, 0b01100111, 0b11100000, 0b00010100,
  0b01111110, 0b11111111, 0b01111110, 0b00001101, 0b11110110, 0b10111101, 0b11100000, 0b01000101,
  0b01111000, 0b00001111, 0b11111110, 0b11011011, 0b10110101, 0b11010111, 0b11100000, 0b00010010,
  0b00111100, 0b00000000, 0b11111101, 0b11110000, 0b11101110, 0b10111111, 0b11110000, 0b00001001,
  0b00111110, 0b00000000, 0b00111011, 0b11100011, 0b11111011, 0b01001111, 0b11101001, 0b00100100,
  0b00111110, 0b01000100, 0b00110111, 0b11000101, 0b10010110, 0b10111011, 0b11110000, 0b00000010,
  0b00011111, 0b00010000, 0b00111011, 0b11000001, 0b11111101, 0b01101111, 0b11110000, 0b00010101,
  0b00001111, 0b10000000, 0b01110111, 0b10101010, 0b01110111, 0b10111111, 0b11110100, 0b00000010,
  0b00101111, 0b11001000, 0b11011101, 0b11100110, 0b00111010, 0b11111101, 0b11011100, 0b00101001,
  0b10000111, 0b11100000, 0b11110111, 0b00111011, 0b10011101, 0b11100011, 0b00010100, 0b00000100,
  0b00010111, 0b11110001, 0b10010110, 0b10101011, 0b11010110, 0b00000000, 0b00101110, 0b00010010,
  0b01000011, 0b11111111, 0b01101101, 0b11110000, 0b11001010, 0b11100001, 0b10001010, 0b00000001,
  0b00000001, 0b11111011, 0b11110111, 0b10110001, 0b00101110, 0b01000100, 0b00011010, 0b00010100,
  0b10000001, 0b11111111, 0b01001010, 0b10110000, 0b00010110, 0b00000100, 0b00011110, 0b00000010,
  0b00000000, 0b11110101, 0b10111011, 0b11110000, 0b00001111, 0b00000111, 0b11001111, 0b00001001,
  0b10110100, 0b01111111, 0b10101010, 0b11010000, 0b00000111, 0b11011111, 0b11101101, 0b00000100,
  0b00000000, 0b01111111, 0b01111111, 0b10110000, 0b00000110, 0b11111111, 0b01111101, 0b00000001,
  0b01000000, 0b00111101, 0b11100101, 0b11100010, 0b00110111, 0b10011111, 0b11001111, 0b00000100,
  0b00000000, 0b00111111, 0b10000000, 0b11100000, 0b00000111, 0b11011100, 0b00010110, 0b00010001,
  0b01001000, 0b00011011, 0b10001110, 0b00100000, 0b00110010, 0b11101001, 0b01010101, 0b00000100,
  0b00100000, 0b00011101, 0b01010110, 0b10100000, 0b10000011, 0b11100100, 0b10001101, 0b00000001,
  0b10000000, 0b00011110, 0b10111011, 0b00110000, 0b01100011, 0b11111111, 0b11001111, 0b00000100,
  0b01010000, 0b00001110, 0b00101111, 0b10010000, 0b00010011, 0b11100101, 0b01110101, 0b10010001,
  0b01001000, 0b00001110, 0b10111001, 0b01011000, 0b10001001, 0b11111000, 0b10100101, 0b10000001,
  0b10010000, 0b00001110, 0b10110110, 0b10110010, 0b00000101, 0b11111111, 0b11101101, 0b10000010,
  0b01001010, 0b00001110, 0b11011110, 0b11111110, 0b01000001, 0b11111111, 0b11010101, 0b10000000,
  0b01010000, 0b00001101, 0b00010000, 0b11111001, 0b01001001, 0b11111111, 0b10101101, 0b10000101,
  0b10001000, 0b00001111, 0b11000101, 0b10101111, 0b00001110, 0b11111111, 0b00101101, 0b00000000,
  0b01010010, 0b00000111, 0b00100111, 0b11111011, 0b11111101, 0b11111111, 0b00110111, 0b00000101,
  0b00101000, 0b00000111, 0b11111111, 0b01111111, 0b00000001, 0b11011110, 0b00101111, 0b00000000,
  0b10000010, 0b10000111, 0b11111101, 0b11101111, 0b00000000, 0b11111111, 0b11011011, 0b00000101,
  0b01101000, 0b00000011, 0b11111111, 0b11111111, 0b00000000, 0b00100000, 0b11011110, 0b00000000,
  0b10010010, 0b00000001, 0b11111010, 0b11111110, 0b11111111, 0b00000000, 0b00111010, 0b00001010,
  0b01001000, 0b01000001, 0b11111111, 0b11111110, 0b10110111, 0b10110000, 0b00111110, 0b00000001,
  0b00101010, 0b10000001, 0b11111111, 0b10100001, 0b11101110, 0b11110001, 0b00011100, 0b00010010,
  0b10010100, 0b00000000, 0b11110111, 0b00000001, 0b00111111, 0b11110010, 0b10011100, 0b00001001,
  0b01000010, 0b10000000, 0b11111110, 0b00101011, 0b10001111, 0b01100000, 0b11011000, 0b00100000,
  0b01011000, 0b00000000, 0b01111100, 0b10010011, 0b11100111, 0b10100001, 0b01001000, 0b00001010,
  0b00100101, 0b01000000, 0b01111001, 0b00000111, 0b11101010, 0b10100000, 0b10001000, 0b00000000,
  0b10010001, 0b00000000, 0b01111010, 0b00000111, 0b11110011, 0b00100000, 0b00010000, 0b00000001,
  0b01001100, 0b01000000, 0b00111000, 0b01000101, 0b11110001, 0b01100000, 0b00010000, 0b00000100,
  0b01010010, 0b00000000, 0b00111000, 0b00000110, 0b10110101, 0b10000000, 0b00100000, 0b00000000,
  0b10101010, 0b10100000, 0b00010010, 0b00000010, 0b11010100, 0b11111100, 0b00100000, 0b01100100,
  0b01001001, 0b00001000, 0b00011000, 0b00000011, 0b01110110, 0b10111100, 0b11100000, 0b01100100,
  0b00100100, 0b01000000, 0b00011000, 0b00000011, 0b01100111, 0b11000011, 0b11000001, 0b01100010,
  0b10101001, 0b00100000, 0b01111001, 0b00000001, 0b10100100, 0b10111111, 0b11000001, 0b01110010,
  0b01010010, 0b00000000, 0b11101100, 0b00000001, 0b00011111, 0b11111111, 0b11001010, 0b01111010,
  0b00101001, 0b00000000, 0b11110110, 0b00000001, 0b01111011, 0b11010111, 0b10010110, 0b00111100,
  0b10010100, 0b01000001, 0b11111111, 0b10000000, 0b11111110, 0b01111101, 0b10010000, 0b01111000,
  0b11010010, 0b00000011, 0b11011011, 0b11111111, 0b11001010, 0b11010111, 0b00010111, 0b00111100,
  0b01010100, 0b01000011, 0b11111110, 0b11111111, 0b01011011, 0b01110111, 0b00101010, 0b00111110,
  0b01010001, 0b00000111, 0b11111011, 0b01101101, 0b01101010, 0b10011010, 0b11001010, 0b10111110,
};

#define   MESH_PREFIX     "kennet"
#define   MESH_PASSWORD   "kennet123"
#define   MESH_PORT       5555

Scheduler userScheduler; 
painlessMesh  mesh;

unsigned long he4t = 0;
bool he4timer = false;

bool rotatos = LOW;

float extemp = 27.10;
bool extempflag = true;

enum HEAT {
  HE0,
  HE1,
  HE2,
  HE3,
  HE4
} heat = HE4;

void heatcore () {
  switch (heat) {
    case HE0:
      digitalWrite(13, HIGH);  // вкл кулер

      digitalWrite(27, HIGH);   //викл реле L
      break;

    case HE1:
      digitalWrite(13, HIGH);  // вкл кулер
      digitalWrite(27, LOW); //вкл реле L
      break;

    case HE2:
      
      break;
    case HE3:
      
      break;
    case HE4:
      digitalWrite(13, LOW); // викл кулер
      digitalWrite(27, HIGH); //викл реле L
      
      digitalWrite(26, LOW); // викл оборотне реле
      break;
  }
}

void heatfeedback () {
  switch (heat) {
    case HE0:
      mesh.sendSingle(624409705,"250");
      break;
    case HE1:
      mesh.sendSingle(624409705,"251");
      break;
    case HE2:
      mesh.sendSingle(624409705,"252");
      break;
    case HE3:
      mesh.sendSingle(624409705,"253");
      break;
    case HE4:
      mesh.sendSingle(624409705,"254");
      break;
  }
}

void safetimer () { // цей таймер запускаєця коли нада охладити нагреватель перед виключенням
  if (he4timer) {
    if (millis() - he4t >= 30000) { // 30 секунд
      heat = HE4;
      he4timer = false; 
    }
  }
}

void rotaation () { // обороти корпуса
  rotatos = !rotatos;
  digitalWrite(26, rotatos);
  mesh.sendSingle(624409705, "09" + (rotatos ? String("1") : String("0")));
}

void receivedCallback( uint32_t from, String &msg ) {
  String str1 = msg.c_str();
  String str2 = "he0";
  String str3 = "he1";
  String str4 = "he2";
  String str5 = "he3";
  String str6 = "he4";
  String str7 = "he5";
  String str8 = "hero";
  String str9 = "heho";

  if (str1.equals(str2)) { // просто кулер
    heat = HE0;
    heatfeedback();
  }
  else if (str1.equals(str3)) { // кулер + нагрів L
    heat = HE1;
    heatfeedback();
  }
  else if (str1.equals(str4)) { // кулер + нагрів H
    heat = HE2;
    heatfeedback();
  }
  else if (str1.equals(str5)) { // кулер + нагрів L + H
    heat = HE3;
    heatfeedback();
  }
  else if (str1.equals(str7)) { // вкл ауто мод
    extempflag = true;
  }
  else if (str1.equals(str6)) { // виключено
    heat = HE0;
    he4t = millis();
    he4timer = true;
    heatfeedback();
    extempflag = false;
  }
  else if (str1.equals(str8)) { // оборот корпуса
    rotaation();
  }
  else if (str1.equals(str9)) { // eho
    heatfeedback();
    mesh.sendSingle(624409705, "09" + (rotatos ? String("1") : String("0")));
    mesh.sendSingle(624409705, "R5" + String(extemp));
  }
  else if (str1.startsWith("05")) {  // AUTO мод

    String tempString = str1.substring(2); // Отримуємо підрядок після перших двох символів
    float temperature = tempString.toFloat();

    if (tempString.length() > 0) {
      mesh.sendSingle(624409705, "A5");

      if ((temperature < extemp) && (extempflag)) {
        heat = HE1;; // меньше заданої температури
      } else {
        heat = HE0;; // більше
      }
    }
  }
  else if (str1.startsWith("W5")) { // тут устанавлюем яку температуру буде підтримувати AUTO мод

    String tempString = str1.substring(2); // Отримуємо підрядок після перших двох символів
    if (tempString.length() > 0) {
      mesh.sendSingle(624409705, "R5" + tempString); // тут наверно нада поміняти на екстемп
      extemp = tempString.toFloat();    // устанавлюем підтримувану температуру
    }
  }
}


void setup() {
  Serial.begin(115200);

  pinMode(13, OUTPUT); //реле кулера
  pinMode(26, OUTPUT); //реле обороту корпуса
  pinMode(14, OUTPUT); //реле H
  pinMode(27, OUTPUT); //реле L

  digitalWrite(27, HIGH);
  digitalWrite(26, LOW);
  digitalWrite(14, HIGH);

  mesh.init( MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT );
  mesh.onReceive(&receivedCallback);

  u8g2.begin();                                           // ініт дисплея
  u8g2.drawBitmap(32, 0, 8, 64, logo);               // прінт лого
  u8g2.sendBuffer();                                      // висилка буфера)
  delay(3000);                                            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  u8g2.enableUTF8Print();  
  u8g2.setFont(u8g2_font_cu12_t_cyrillic);                // підтримка шрифтом українського текста 
  u8g2.clearBuffer();
  u8g2.sendBuffer();
}

void loop() {

  safetimer ();
  heatcore ();

  mesh.update();
}
